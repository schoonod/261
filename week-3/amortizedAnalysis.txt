DANE SCHOONOVER
CS 261-400


1. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will double in capacity each time a new item is added to an already full dynamic array? 
(1 * 8 + 8) + (1 * 8 + 16) + (1 * 16)
= 16 + 24 + 16 = 56


As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push? 


56/32 = O(1.75)




2. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will grow by a constant 2 spaces each time a new item is added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push?


32-8 = 24
24/2 = 12
12 copies
8+10+12+14+16+18+20+22+24+26+28+30
add 32 pushes
260 total units of cost
(260/32) = O(8.125)


3. Suppose that a dynamic array stack doubles its capacity when it is full, and shrinks (on Pop only) its capacity by half when the array is half full or less. Can you devise a sequence of N push() and pop() operations which will result in poor performance (O(N^2) total cost)? How might you adjust the array's shrinking policy to avoid this? (Hint: You may assume that the initial capacity of the array is N/2.)


Poor performance - for every push, capacity doubles. for every pop, capacity halves.
To increase performance during array shrinking, only shrink when size = capacity/2.